generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  password            String
  role                UserRole
  bureauId            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  messages            Message[]
  notifications       Notification[]
  createdTransactions Transaction[]  @relation("UserCreatedTransactions")
  bureau              Bureau?        @relation(fields: [bureauId], references: [id])

  @@map("users")
}

model EspaceTravail {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bureaux   Bureau[]

  @@map("espaces_travail")
}

model Bureau {
  id              String           @id @default(uuid())
  name            String
  color           String           @default("#3b82f6")
  country         String           @default("FR")
  espaceTravailId String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  bankConnections BankConnection[]
  espaceTravail   EspaceTravail    @relation(fields: [espaceTravailId], references: [id])
  stats           FinancialStats[]
  messages        Message[]
  notifications   Notification[]
  syncLogs        SyncLog[]
  transactions    Transaction[]
  users           User[]

  @@map("bureaux")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  bureauId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  bureau    Bureau   @relation(fields: [bureauId], references: [id])

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  content   String?
  isRead    Boolean  @default(false)
  userId    String
  bureauId  String?
  createdAt DateTime @default(now())
  bureau    Bureau?  @relation(fields: [bureauId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Account {
  id           String        @id @default(uuid())
  type         AccountType
  name         String
  balance      Float         @default(0)
  currency     String        @default("EUR")
  bureauId     String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bureau       Bureau        @relation(fields: [bureauId], references: [id])
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String          @id @default(uuid())
  amount      Float
  type        TransactionType
  description String
  category    String?
  date        DateTime
  accountId   String
  bureauId    String
  createdById String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  account     Account         @relation(fields: [accountId], references: [id])
  bureau      Bureau          @relation(fields: [bureauId], references: [id])
  createdBy   User            @relation("UserCreatedTransactions", fields: [createdById], references: [id])

  @@map("transactions")
}

model FinancialStats {
  id           String   @id @default(uuid())
  bureauId     String
  period       String
  totalIncome  Float    @default(0)
  totalExpense Float    @default(0)
  netFlow      Float    @default(0)
  startBalance Float    @default(0)
  endBalance   Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bureau       Bureau   @relation(fields: [bureauId], references: [id])

  @@unique([bureauId, period])
  @@map("financial_stats")
}

model BankConnection {
  id             String             @id @default(uuid())
  bankName       String
  country        String
  connectionType BankConnectionType
  credentials    String
  isActive       Boolean            @default(false)
  lastSync       DateTime?
  bureauId       String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  bureau         Bureau             @relation(fields: [bureauId], references: [id])
  syncConfig     SyncConfig?
  syncLogs       SyncLog[]

  @@map("bank_connections")
}

model SyncConfig {
  id               String         @id @default(uuid())
  frequency        SyncFrequency
  autoSync         Boolean        @default(true)
  syncTransactions Boolean        @default(true)
  syncBalance      Boolean        @default(true)
  lastSuccess      DateTime?
  lastError        String?
  bankConnectionId String         @unique
  bankConnection   BankConnection @relation(fields: [bankConnectionId], references: [id])

  @@map("sync_configs")
}

model SyncLog {
  id                 String         @id @default(uuid())
  bankConnectionId   String
  bureauId           String
  type               SyncLogType
  status             SyncStatus
  details            String?
  transactionsSynced Int?
  errorMessage       String?
  startedAt          DateTime       @default(now())
  completedAt        DateTime?
  bankConnection     BankConnection @relation(fields: [bankConnectionId], references: [id])
  bureau             Bureau         @relation(fields: [bureauId], references: [id])

  @@map("sync_logs")
}

enum UserRole {
  ADMIN_1
  ADMIN_2
  ADMIN_3
  USER

  @@map("user_roles")
}

enum AccountType {
  BANQUE
  PAYPAL
  CAISSE
  MOBILE_MONEY
  OTHER
}

enum TransactionType {
  ENTREE
  SORTIE
}

enum BankConnectionType {
  BNP_PARIBAS
  SOCIETE_GENERALE
  PAYPAL
  ORANGE_MONEY
  MTN_MONEY
  WAVE
  MANUAL
}

enum SyncFrequency {
  HOURLY
  DAILY
  WEEKLY
  MANUAL
}

enum SyncLogType {
  INITIAL_SYNC
  SCHEDULED_SYNC
  MANUAL_SYNC
  ERROR_RECOVERY
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}
