generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole
  bureau    Bureau?  @relation(fields: [bureauId], references: [id])
  bureauId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages       Message[]
  notifications  Notification[]

  @@map("users")
}

model EspaceTravail {
  id        String   @id @default(uuid())
  name      String
  bureaux   Bureau[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("espaces_travail")
}

model Bureau {
  id             String   @id @default(uuid())
  name           String
  color          String   @default("#3b82f6")
  country        String   @default("FR")
  espaceTravail  EspaceTravail @relation(fields: [espaceTravailId], references: [id])
  espaceTravailId String
  users          User[]
  messages       Message[]
  notifications  Notification[] 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bankConnections BankConnection[]
  syncLogs        SyncLog[]

  @@map("bureaux")
}

enum UserRole {
  ADMIN_1
  ADMIN_2  
  ADMIN_3
  USER

@@map("user_roles")
}

// Ajouter après les modèles existants

model Message {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  bureau    Bureau   @relation(fields: [bureauId], references: [id])
  bureauId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Notification {
  id        String     @id @default(uuid())
  type      String     // MESSAGE, TRANSACTION, SYSTEM
  title     String
  content   String?
  isRead    Boolean    @default(false)
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  bureau    Bureau?    @relation(fields: [bureauId], references: [id])
  bureauId  String?
  createdAt DateTime   @default(now())

  @@map("notifications")
}

// Ajouter après les modèles existants

model Account {
  id        String      @id @default(uuid())
  type      AccountType
  name      String
  balance   Float       @default(0)
  currency  String      @default("EUR")
  bureau    Bureau      @relation(fields: [bureauId], references: [id])
  bureauId  String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String        @id @default(uuid())
  amount      Float
  type        TransactionType
  description String
  category    String?
  date        DateTime
  account     Account       @relation(fields: [accountId], references: [id])
  accountId   String
  bureau      Bureau        @relation(fields: [bureauId], references: [id])
  bureauId    String
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("transactions")
}

model FinancialStats {
  id           String    @id @default(uuid())
  bureau       Bureau    @relation(fields: [bureauId], references: [id])
  bureauId     String
  period       String    // "2024-01", "2024-Q1", "2024"
  totalIncome  Float     @default(0)
  totalExpense Float     @default(0)
  netFlow      Float     @default(0)
  startBalance Float     @default(0)
  endBalance   Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([bureauId, period])

  @@map("financial_stats")
}

enum AccountType {
  BANQUE
  PAYPAL
  CAISSE
  MOBILE_MONEY
  OTHER
}

enum TransactionType {
  ENTREE
  SORTIE
}

// Mettre à jour le modèle Bureau pour les relations
model Bureau {
  // ... champs existants ...
  accounts     Account[]
  transactions Transaction[]
  stats        FinancialStats[]
}

// Ajouter après les modèles existants

model BankConnection {
  id           String    @id @default(uuid())
  bankName     String
  country      String
  connectionType BankConnectionType
  credentials  String    // Chiffré
  isActive     Boolean   @default(false)
  lastSync     DateTime?
  bureau       Bureau    @relation(fields: [bureauId], references: [id])
  bureauId     String
  syncConfig   SyncConfig?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("bank_connections")
}

model SyncConfig {
  id               String   @id @default(uuid())
  frequency        SyncFrequency
  autoSync         Boolean  @default(true)
  syncTransactions Boolean  @default(true)
  syncBalance      Boolean  @default(true)
  lastSuccess      DateTime?
  lastError        String?
  bankConnection   BankConnection @relation(fields: [bankConnectionId], references: [id])
  bankConnectionId String   @unique

  @@map("sync_configs")
}

model SyncLog {
  id              String    @id @default(uuid())
  bankConnection  BankConnection @relation(fields: [bankConnectionId], references: [id])
  bankConnectionId String
  type            SyncLogType
  status          SyncStatus
  details         String?
  transactionsSynced Int?
  errorMessage    String?
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  
  @@map("sync_logs")
}

enum BankConnectionType {
  BNP_PARIBAS
  SOCIETE_GENERALE
  PAYPAL
  ORANGE_MONEY
  MTN_MONEY
  WAVE
  MANUAL
}

enum SyncFrequency {
  HOURLY
  DAILY
  WEEKLY
  MANUAL
}

enum SyncLogType {
  INITIAL_SYNC
  SCHEDULED_SYNC
  MANUAL_SYNC
  ERROR_RECOVERY
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}
